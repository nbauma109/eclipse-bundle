name: Eclipse + SonarLint Builder

on:
  schedule:
    - cron: '0 17 * * 6'   # Saturdays at 17:00 UTC
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get latest Eclipse SimRel train
        id: train
        run: |
          set -euo pipefail
          PAGE="$(curl -fsSL https://www.eclipse.org/downloads/packages/release)"
          TRAIN="$(printf '%s' "$PAGE" | grep -Eo '[0-9]{4}-[0-9]{2} R' | head -n1 | cut -d' ' -f1)"
          if [[ -z "${TRAIN:-}" ]]; then
            echo "Could not detect latest train" >&2
            exit 1
          fi
          echo "train=$TRAIN" >> "$GITHUB_OUTPUT"

      - name: Get latest SonarLint for Eclipse version (from GitHub Releases)
        id: sonarlint
        env:
          GH_TOKEN: ${{ github.token }}   # avoid rate limiting
        run: |
          set -euo pipefail
          JSON="$(curl -fsSL -H "Authorization: Bearer ${GH_TOKEN}" https://api.github.com/repos/SonarSource/sonarlint-eclipse/releases/latest)"
          VER="$(printf '%s' "$JSON" | jq -r '.tag_name' | sed 's/^v//')"
          if [[ -z "${VER:-}" || "${VER}" == "null" ]]; then
            echo "Failed to get SonarLint version from GitHub" >&2
            exit 1
          fi
          ZIP_URL="https://binaries.sonarsource.com/SonarLint-for-Eclipse/releases/org.sonarlint.eclipse.site-${VER}.zip"
          echo "version=$VER"   >> "$GITHUB_OUTPUT"
          echo "zip_url=$ZIP_URL" >> "$GITHUB_OUTPUT"

      - name: Decide release tag (skip if already published)
        id: decide
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail
          TRAIN="${{ steps.train.outputs.train }}"
          SL_VER="${{ steps.sonarlint.outputs.version }}"
          TAG="eclipse-java-${TRAIN}-sonarlint-${SL_VER}"
          if gh release view "$TAG" >/dev/null 2>&1; then
            echo "skip=true"  >> "$GITHUB_OUTPUT"
          else
            echo "skip=false" >> "$GITHUB_OUTPUT"
          fi
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"

      - name: Stop early if release already exists
        if: steps.decide.outputs.skip == 'true'
        run: echo "Release ${{ steps.decide.outputs.tag }} already exists. Nothing to do."

      - name: Install build tools
        if: steps.decide.outputs.skip == 'false'
        run: |
          set -euo pipefail
          sudo apt-get update -y
          sudo apt-get install -y unzip zip xz-utils p7zip-full rsync jq

      - name: Download Eclipse (Linux & Windows) via mirrors with retry
        if: steps.decide.outputs.skip == 'false'
        id: dl
        run: |
          set -euo pipefail
          TRAIN="${{ steps.train.outputs.train }}"
          BASE="/technology/epp/downloads/release/${TRAIN}/R"
          LNX="eclipse-java-${TRAIN}-R-linux-gtk-x86_64.tar.gz"
          WIN="eclipse-java-${TRAIN}-R-win32-x86_64.zip"

          pick_and_download () {
            local FILE="$1" OUT="$2"
            local XML_URL="https://www.eclipse.org/downloads/download.php?file=${BASE}/${FILE}&format=xml"
            local MIRRORS
            MIRRORS="$(curl -fsSL "$XML_URL" | grep -oP '(?<=url=").*?(?=")')"
            if [[ -z "${MIRRORS}" ]]; then
              echo "No mirrors found for ${FILE}" >&2
              exit 1
            fi
            for url in $MIRRORS; do
              echo "Trying $url"
              if curl -fSL --retry 3 --connect-timeout 20 "$url" -o "$OUT"; then
                echo "Downloaded $OUT from $url"
                return 0
              fi
            done
            echo "Failed to download $OUT from all mirrors" >&2
            exit 1
          }

          pick_and_download "$LNX" "$LNX"
          pick_and_download "$WIN" "$WIN"

          echo "linux=$LNX"   >> "$GITHUB_OUTPUT"
          echo "windows=$WIN" >> "$GITHUB_OUTPUT"

      - name: Unpack Linux Eclipse
        if: steps.decide.outputs.skip == 'false'
        id: unpack
        run: |
          set -euo pipefail
          tar -xzf "${{ steps.dl.outputs.linux }}"
          ECLIPSE_DIR="$(find . -maxdepth 1 -type d -name eclipse | head -n1)"
          if [[ -z "${ECLIPSE_DIR:-}" ]]; then
            echo "Eclipse directory not found after extraction" >&2
            exit 1
          fi
          echo "dir=$ECLIPSE_DIR" >> "$GITHUB_OUTPUT"

      - name: Download SonarLint update-site zip
        if: steps.decide.outputs.skip == 'false'
        id: slzip
        run: |
          set -euo pipefail
          curl -fSL "${{ steps.sonarlint.outputs.zip_url }}" -o "sonarlint-site.zip"
          echo "file=sonarlint-site.zip" >> "$GITHUB_OUTPUT"

      - name: Build dropins from SonarLint update-site
        if: steps.decide.outputs.skip == 'false'
        id: dropins
        run: |
          set -euo pipefail
          mkdir -p sl_site && unzip -q "${{ steps.slzip.outputs.file }}" -d sl_site
          # Prepare a portable dropins layout
          mkdir -p dropins/custom/eclipse/features dropins/custom/eclipse/plugins
          rsync -a sl_site/features/ dropins/custom/eclipse/features/
          rsync -a sl_site/plugins/  dropins/custom/eclipse/plugins/
          echo "dir=$(pwd)/dropins" >> "$GITHUB_OUTPUT"

      - name: Inject dropins into Linux Eclipse & repackage
        if: steps.decide.outputs.skip == 'false'
        id: packlinux
        run: |
          set -euo pipefail
          TRAIN="${{ steps.train.outputs.train }}"
          cp -r "${{ steps.dropins.outputs.dir }}/custom" "${{ steps.unpack.outputs.dir }}/dropins/"
          OUT="eclipse-java-${TRAIN}-R-linux-x86_64-sonarlint.tar.gz"
          tar -czf "$OUT" -C . eclipse
          echo "file=$OUT" >> "$GITHUB_OUTPUT"

      - name: Inject dropins into Windows Eclipse & repackage
        if: steps.decide.outputs.skip == 'false'
        id: packwin
        run: |
          set -euo pipefail
          TRAIN="${{ steps.train.outputs.train }}"
          WIN_ZIP="${{ steps.dl.outputs.windows }}"
          mkdir win && (cd win && unzip -q "../$WIN_ZIP")
          cp -r "${{ steps.dropins.outputs.dir }}/custom" "win/eclipse/dropins/"
          OUT="eclipse-java-${TRAIN}-R-win32-x86_64-sonarlint.zip"
          (cd win && zip -qr "../$OUT" eclipse)
          echo "file=$OUT" >> "$GITHUB_OUTPUT"

      - name: Publish GitHub Release
        if: steps.decide.outputs.skip == 'false'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail
          TITLE="Eclipse Java + SonarLint â€“ ${{ steps.train.outputs.train }} (SonarLint ${{ steps.sonarlint.outputs.version }})"
          gh release create "${{ steps.decide.outputs.tag }}" \
            "${{ steps.packlinux.outputs.file }}" \
            "${{ steps.packwin.outputs.file }}" \
            --title "$TITLE" \
            --notes "Eclipse IDE for Java Developers bundled with SonarLint ${ { steps.sonarlint.outputs.version } } via dropins."
